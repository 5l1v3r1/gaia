// Copyright 2019, Beeri 15.  All rights reserved.
// Author: Roman Gershman (romange@gmail.com)
//
syntax = "proto2";

package mr3.pb;

message WireFormat {
  enum Type {
    LST = 2;
    TXT = 3;
  }
  required Type type = 1;
}

message ShardSpec {
  enum Type {
    MODN = 1;
    USER_DEFINED = 2;
  }

  required Type type = 1;
  optional uint32 modn = 2;

  // An approximate limit on raw shard size before file format transformations or compressions.
  // Can be passed slightly due to internal buffering in the system. In megabytes.
  optional uint32 max_raw_size_mb = 5;
}

message Input {
  required string name = 1;

  required WireFormat format = 2;

  message FileSpec {
    required string url_glob = 1;

    oneof shard_id_ref {
      string custom_shard_id = 2;
      uint32 shard_id = 3;
    }

    oneof metadata {
      int64  i64val = 4;
      string strval = 5;
    }
  };

  // In case of sharded input, each file_spec corresponds to a shard.
  repeated FileSpec file_spec = 4;
  optional uint32 skip_header = 5;
}

message Output {
  required string name = 1;
  required WireFormat format = 2;

  enum CompressType {
    NONE = 0;
    GZIP = 1;
    ZSTD = 2;
  }

  message Compress {
    required CompressType type = 1;
    optional int32 level = 2 [default = 1];
  }

  optional Compress compress = 3;
  optional ShardSpec shard_spec = 4;

  optional string type_name = 5;  // The type name of the record serialized, when applicable.
}


// Can be mapper or joiner.
message Operator {
  repeated string input_name = 1;  // corresponds to the name in Input.name.

  optional string op_name = 2;

  required Output output = 3;

  enum Type {
    MAP = 1;
    GROUP = 2;
  }
  optional Type type = 4;
}
